--- a/src/map/status.c
+++ b/src/map/status.c
@@ -8245,6 +8245,31 @@ int status_change_end_(struct block_list* bl, enum sc_type type, int tid, const char* file, int line)
 	return 1;
 }
 
+/**
+ * Check and cancel songs/dances when switching weapons
+ * @param bl: Object to check for songs/dances
+ * @param weapon: New weapon type being equipped
+ */
+void status_check_songs_on_weapon_change(struct block_list *bl, int weapon) {
+	struct status_change *sc;
+	struct map_session_data *sd;
+
+	if (bl->type != BL_PC)
+		return;
+	
+	sd = BL_CAST(BL_PC, bl);
+	sc = status_get_sc(bl);
+
+	if (!sc || !sd)
+		return;
+
+	// Check if player is Bard/Dancer or advanced version
+	if ((sd->class_&MAPID_UPPERMASK) == MAPID_MINSTRELWANDERER || 
+		(sd->class_&MAPID_UPPERMASK) == MAPID_TROUVERE) {
+		// Cancel all songs and dances
+		status_change_end(bl, SC_DANCING, INVALID_TIMER);
+	}
+}
+
 /*==========================================
  * Status Change Timer
  * Used to handle status changes that need timer-based functionality.
@@ -9856,6 +9881,9 @@ int status_change_start(struct block_list* bl, enum sc_type type, int rate, int val1, int val2, int val3, int val4, int tick, int flag)
 		if (sd && sd->inventory_data[n])
 			status_calc_pc(sd,SCO_NONE);
 
+		// Check and cancel songs if weapon changed
+		status_check_songs_on_weapon_change(bl, sd->inventory_data[n]->look);
+
 		if(sd && sd->inventory_data[n]) { // check if the item still exists
 			switch (sd->inventory_data[n]->type) {
 				case IT_WEAPON: