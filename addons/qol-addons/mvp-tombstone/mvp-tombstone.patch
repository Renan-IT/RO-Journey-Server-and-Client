diff --git a/src/map/battle.c b/src/map/battle.c
index 1234567..89abcdef 100644
--- a/src/map/battle.c
+++ b/src/map/battle.c
@@ -2000,6 +2000,163 @@ int battle_damage(struct block_list *src,struct block_list *bl,struct damage *dmg
 	struct mob_data *mob = (struct mob_data *)bl;
 	
+	// Check if monster is an MVP
+	if (mob->db->mvp_exp > 0) {
 		struct map_session_data *sd = map_id2sd(mob->killer_id);
 		if (sd) {
+			// Get respawn time based on mob ID
+			int respawn_minutes = 120; // Default 2 hours
+			
+			switch(mob->mob_id) {
+				// 60-70 minute respawns
+				case 1511: // Amon Ra
+				case 1272: // Dark Lord
+				case 1389: // Dracula
+				case 1086: // Golden Thief Bug
+				case 1150: // Moonlight Flower
+				case 1087: // Orc Hero
+				case 1038: // Osiris
+				case 1157: // Pharaoh
+				case 1251: // Stormy Knight
+				case 1312: // Turtle General
+					respawn_minutes = 60;
+					break;
+					
+				// 94-104 minute respawn
+				case 1418: // Evil Snake Lord
+					respawn_minutes = 94;
+					break;
+					
+				// 120-130 minute respawns
+				case 1039: // Baphomet
+				case 1046: // Doppelganger
+				case 1112: // Drake
+				case 1115: // Eddga
+				case 1871: // Fallen Bishop
+				case 1252: // Garm
+				case 1768: // Gopinich
+				case 1734: // Kiel D-01
+				case 1147: // Maya
+				case 1059: // Mistress
+				case 1190: // Orc Lord
+				case 1159: // Phreeoni
+				case 1583: // Thanatos
+				case 1685: // Vesper
+					respawn_minutes = 120;
+					break;
+					
+				// 125-135 minute respawn
+				case 1623: // RSX-0806
+					respawn_minutes = 125;
+					break;
+					
+				// 133-143 minute respawn
+				case 1373: // Lord of Death
+					respawn_minutes = 133;
+					break;
+					
+				// 240-250 minute respawns
+				case 1785: // Atroce
+					respawn_minutes = 240;
+					break;
+					
+				// 300-310 minute respawn
+				case 1832: // Tao Gunka
+					respawn_minutes = 300;
+					break;
+					
+				// 720-730 minute respawn
+				case 1873: // Beelzebub
+					respawn_minutes = 720;
+					break;
+			}
+			
+			// Remove existing tomb if any
+			struct npc_data *existing_tomb = map_id2nd(mob->tomb_id);
+			if (existing_tomb) {
+				map_delnpc(existing_tomb);
+			}
+			
+			char killer_name[NAME_LENGTH];
+			char timestamp[32];
+			time_t now = time(NULL);
+			struct tm *tm = localtime(&now);
+			strftime(timestamp, sizeof(timestamp), "%Y-%m-%d %H:%M:%S", tm);
+			strcpy(killer_name, sd->status.name);
+			
+			// Create tomb NPC
+			struct npc_data *nd = npc_create_npc("MVP Tomb", mob->bl.m, mob->bl.x, mob->bl.y);
+			if (nd) {
+				nd->class_ = JT_TOMB;
+				nd->u.tomb.killer_id = sd->status.char_id;
+				strncpy(nd->u.tomb.killer_name, killer_name, NAME_LENGTH-1);
+				nd->u.tomb.death_time = now;
+				nd->u.tomb.mob_id = mob->mob_id;
+				nd->u.tomb.mob_name = mob->db->name;
+				
+				// Set tomb appearance
+				nd->sprite = 722; // Tomb sprite ID
+				nd->dir = 0;
+				
+				// Store tomb ID in mob data
+				mob->tomb_id = nd->bl.id;
+				
+				// Add tomb to map
+				map_addnpc(nd);
+				
+				// Set timer to remove tomb when MVP respawns
+				add_timer(gettick() + (respawn_minutes * 60 * 1000), npc_remove_tomb, nd->bl.id, 0);
+			}
+		}
+	}
+	
+	return 1;
}

struct npc_data {
 			// Remove existing tomb if any
 			struct npc_data *existing_tomb = map_id2nd(mob->tomb_id);
 			if (existing_tomb) {
@@ -2034,7 +2191,7 @@ int battle_damage(struct block_list *src,struct block_list *bl,struct damage *dmg
 				map_addnpc(nd);
 				
 				// Set timer to remove tomb when MVP respawns
-				add_timer(gettick() + mob->db->respawn_time * 1000, npc_remove_tomb, nd->bl.id, 0);
+				add_timer(gettick() + (respawn_minutes * 60 * 1000), npc_remove_tomb, nd->bl.id, 0);
 			}
 		}
 	}
@@ -2200,6 +2357,13 @@ struct npc_data {
 		struct {
 			int killer_id;
 			char killer_name[NAME_LENGTH];
+			int mob_id;
+			const char *mob_name;
 			time_t death_time;
+			int respawn_minutes;
 		} tomb;
 		// ... existing code ...
 	} u;
 };
+
+// Function declarations
+int npc_remove_tomb(int tid, unsigned int tick, int id, intptr_t data);